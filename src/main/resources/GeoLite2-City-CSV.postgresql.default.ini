// Configuration file maxmind-geoip2-csv2sql-converter for converting GeoLite2-City-CSV for PostgreSQL
// Section syntax: Settings: [Settings:key]; Template: [template_name]
// Merge next template line to current: \ on end line; Allowed: \n \r \t; Escaping: \\n \\r \\t
// Escape bracket char \{ or \[section name] if char '{' or section is a part of template
// Comments line: //
// Example template engine syntax:
// Field with getter or method(optional parameters): ${(.|..)fieldWithGetter|method("string param", longParam) key{value} key2{value2}}
// forEach: #{forEach{some text ${collection reference key{value} key2{value2}} ${collection2 reference key3{value3} key4{value4}} some textN} key5{value5} key6{value6}}

[Settings:Import]
locations_filenames=#{forEach{GeoLite2-City-Locations-${locales..code}.csv} Separator{,}}
ipv4_filename=GeoLite2-City-Blocks-IPv4.csv
ipv6_filename=GeoLite2-City-Blocks-IPv6.csv

[Settings:Export]
values_separator=,
values_end=;
values_end_of_file=
values_count_per_insert=
timezone_create_filename=timezone_create.sql
timezone_insert_filename=timezone_%03d.sql
timezone_indexes_filename=timezone_indexes.sql
country_create_filename=country_create.sql
country_insert_filename=country_%03d.sql
country_indexes_filename=country_indexes.sql
subdivision1_create_filename=subdivision1_create.sql
subdivision1_insert_filename=subdivision1_%03d.sql
subdivision1_indexes_filename=subdivision1_indexes.sql
subdivision2_create_filename=subdivision2_create.sql
subdivision2_insert_filename=subdivision2_%03d.sql
subdivision2_indexes_filename=subdivision2_indexes.sql
city_create_filename=city_create.sql
city_insert_filename=city_%03d.sql
city_indexes_filename=city_indexes.sql
ipv4_create_filename=ipv4_create.sql
ipv4_insert_filename=ipv4_%03d.sql
ipv4_indexes_filename=ipv4_indexes.sql
ipv6_create_filename=ipv6_create.sql
ipv6_insert_filename=ipv6_%03d.sql
ipv6_indexes_filename=ipv6_indexes.sql
// One of valid geoname_id for ipv4_values/ipv6_values templates from Blocks-IPv4/Blocks-IPv6 files (${.priorityGeonameId} placeholder);
ipblocks_priority_geonameId_groupNames=geoname_id,registered_country_geoname_id,represented_country_geoname_id
log_ignored_locations=false
log_ignored_ipblocks=false
log_undefined_all_geonameIds=true
log_undefined_all_subdivisions_and_city_name=false

schema_name=maxmind_city
load_data_filename=load_data.sql
windows_loader_filename=loader.bat
unix_loader_filename=loader.sh

[load_data]
SET search_path TO "${config.get("Export").get("schema_name")}";
DROP SCHEMA IF EXISTS "${config.get("Export").get("schema_name")}" CASCADE; // CASCADE - Foreign key objects will be deleted in other schemas/tables, not data (rows)
CREATE SCHEMA "${config.get("Export").get("schema_name")}";
#{forEach{\i ${createPaths..fileName}} Separator{\n}}
#{forEach{\i ${insertPaths..fileName}} Separator{\n} Disable{EmptyCollection}}
#{forEach{\i ${indexPaths..fileName}} Separator{\n}}
-- IPv4 converter function bytea to bigint available in https:/\/stackoverflow.com/a/36329742
-- int/bigint to bytea available in postgres I/O: int4send(), int8send()
-- IPv6 converter functions bytea to numeric/numeric to bytea available in https:/\/stackoverflow.com/a/57727894

[windows_loader]
@echo off
chcp 65001
SET scriptPath=%~dp0
%scriptPath:~0,2%
cd %scriptPath:~0,-1%
set PGPASSWORD=postgres
%PGDATA:~,-5%\bin\psql.exe --host="127.0.0.1" --port=5432 --username="postgres" --dbname=postgres -v ON_ERROR_STOP=1 --single-transaction < "${config.get("Export").get("load_data_filename")}"
echo IPv4 converter function bytea to bigint available in https:/\/stackoverflow.com/a/36329742
echo int/bigint to bytea available in postgres I/O: int4send(), int8send()
echo IPv6 converter functions bytea to numeric/numeric to bytea available in https:/\/stackoverflow.com/a/57727894

[unix_loader]
#!/bin/bash
cd "$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
export PGPASSWORD=postgres
psql --host="127.0.0.1" --port=5432 --username="postgres" --dbname=postgres -v ON_ERROR_STOP=1 --single-transaction < "${config.get("Export").get("load_data_filename")}"
echo 'IPv4 converter function bytea to bigint available in https:/\/stackoverflow.com/a/36329742'
echo 'int/bigint to bytea available in postgres I/O: int4send(), int8send()'
echo 'IPv6 converter functions bytea to numeric/numeric to bytea available in https:/\/stackoverflow.com/a/57727894'

[country_create]
CREATE TABLE "country" (
"id" smallint NOT NULL,
"continent_code" char(2) NOT NULL,
//"continent_name_en" varchar(${locationMaxLengths.getOrDefault("continent_name", 31)}) NOT NULL,
// Uncomment one line above and comment one line below, if you need only EN (or yours) continent (add 'en' locale to required argument -l):
#{forEach{"continent_name_${locales..code}" varchar(${locales..getMaxLengthOrDefault("continent_name", 31)}) NOT NULL} Separator{,\n}},
"iso_code" char(2) DEFAULT NULL,
"emoji" char(2) DEFAULT NULL,
#{forEach{"name_${locales..code}" varchar(${locales..getMaxLengthOrDefault("country_name", 77)}) DEFAULT NULL} Separator{,\n}}
);

[country_indexes]
ALTER TABLE "country"
ADD CONSTRAINT "country_id_pkey" PRIMARY KEY ("id"),
ADD CONSTRAINT "country_iso_code_UNIQUE" UNIQUE ("iso_code");

[country_insert]
insert into country(id,continent_code,\
//continent_name_en,\
// Uncomment one line above and comment one line below, if you need only EN (or yours) continent (add 'en' locale to required argument -l):
#{forEach{"continent_name_${locales..code}"} Separator{,}},\
iso_code,emoji,#{forEach{"name_${locales..code}"} Separator{,}})values

[country_values]
(${.keys.get("country.id")},\
${.values.get("continent_code") Prefix{'} Postfix{'}},\
//${.localeValues.get("en").get("continent_name") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}},\
// Uncomment one line above and comment one line below, if you need only EN (or yours) continent (add 'en' locale to required argument -l):
#{forEach{${.localeValues.values()..get("continent_name") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}}} Separator{,}},\
${.values.get("country_iso_code") Prefix{'} Postfix{'}},${.emoji Prefix{'} Postfix{'}},\
#{forEach{${.localeValues.values()..get("country_name") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}}} Separator{,}})

[subdivision1_create]
CREATE TABLE "subdivision1" (
"id" smallint NOT NULL,
"iso_code" varchar(${locationMaxLengths.getOrDefault("subdivision_1_iso_code", 3)}) NOT NULL,
#{forEach{"name_${locales..code}" varchar(${locales..getMaxLengthOrDefault("subdivision_1_name", 3)}) DEFAULT NULL} Separator{,\n}}
);

[subdivision1_indexes]
ALTER TABLE "subdivision1"
ADD CONSTRAINT "subdivision1_id_pkey" PRIMARY KEY ("id");

CREATE INDEX "subdivision1_iso_code_idx" ON "subdivision1" ("iso_code");

[subdivision1_insert]
insert into subdivision1(id,iso_code,#{forEach{"name_${locales..code}"} Separator{,}})values

[subdivision1_values]
(${.keys.get("subdivision1.id")},${.values.get("subdivision_1_iso_code") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}},\
#{forEach{${.localeValues.values()..get("subdivision_1_name") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}}} Separator{,}})

[subdivision2_create]
CREATE TABLE "subdivision2" (
"id" smallint NOT NULL,
"iso_code" varchar(${locationMaxLengths.getOrDefault("subdivision_2_iso_code", 3)}) NOT NULL,
#{forEach{"name_${locales..code}" varchar(${locales..getMaxLengthOrDefault("subdivision_2_name", 3)}) DEFAULT NULL} Separator{,\n}}
);

[subdivision2_indexes]
ALTER TABLE "subdivision2"
ADD CONSTRAINT "subdivision2_id_pkey" PRIMARY KEY ("id");

CREATE INDEX "subdivision2_iso_code_idx" ON "subdivision2" ("iso_code");

[subdivision2_insert]
insert into subdivision2(id,iso_code,#{forEach{"name_${locales..code}"} Separator{,}})values

[subdivision2_values]
(${.keys.get("subdivision2.id")},${.values.get("subdivision_2_iso_code") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}},\
#{forEach{${.localeValues.values()..get("subdivision_2_name") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}}} Separator{,}})

[city_create]
CREATE TABLE "city" (
"geoname_id" int NOT NULL,
"country_id" smallint NOT NULL,
"subdivision1_id" smallint DEFAULT NULL,
"subdivision2_id" smallint DEFAULT NULL,
#{forEach{"name_${locales..code}" varchar(${locales..getMaxLengthOrDefault("city_name", 120)}) DEFAULT NULL} Separator{,\n}},
"metro_code" smallint DEFAULT NULL,
"time_zone_id" smallint NOT NULL,
"is_in_european_union" bool NOT NULL
);

[city_indexes]
ALTER TABLE "city"
ADD CONSTRAINT "city_geoname_id_pkey" PRIMARY KEY ("geoname_id"),
ADD CONSTRAINT "city_country_id_fk" FOREIGN KEY ("country_id") REFERENCES "country" ("id") ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT "city_subdivision1_id_fk" FOREIGN KEY ("subdivision1_id") REFERENCES "subdivision1" ("id") ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT "city_subdivision2_id_fk" FOREIGN KEY ("subdivision2_id") REFERENCES "subdivision2" ("id") ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT "city_time_zone_id_fk" FOREIGN KEY ("time_zone_id") REFERENCES "timezone" ("id") ON UPDATE CASCADE ON DELETE RESTRICT;

CREATE INDEX "city_country_id_fk_idx" ON "city" ("country_id");
CREATE INDEX "city_subdivision1_id_fk_idx" ON "city" ("subdivision1_id");
CREATE INDEX "city_subdivision2_id_fk_idx" ON "city" ("subdivision2_id");
CREATE INDEX "city_time_zone_id_fk_idx" ON "city" ("time_zone_id");

[city_insert]
insert into city(geoname_id,country_id,subdivision1_id,subdivision2_id,#{forEach{"name_${locales..code}"} Separator{,}},\
metro_code,time_zone_id,is_in_european_union)values

[city_values]
(${.values.get("geoname_id")},${.keys.get("country.id")},\
${.keys.get("subdivision1.id")},${.keys.get("subdivision2.id")},\
#{forEach{${.localeValues.values()..get("city_name") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}}} Separator{,}},\
${.values.get("metro_code")},${.keys.get("timezone.id")},${.values.get("is_in_european_union")}::bool)

[ipv4_create]
CREATE TABLE "ipv4" (
"network" cidr NOT NULL,
"start_ip" inet NOT NULL,
"last_ip" inet NOT NULL,
"start_int" bigint NOT NULL,
"last_int" bigint NOT NULL,
"start_bin" bytea NOT NULL,
"last_bin" bytea NOT NULL,
// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
"v_geoname_id" int NOT NULL,
"geoname_id" int DEFAULT NULL,
"registered_country_geoname_id" int DEFAULT NULL,
"represented_country_geoname_id" int DEFAULT NULL,
"is_anonymous_proxy" bool NOT NULL,
"is_satellite_provider" bool NOT NULL,
"postal_code" varchar(${ipv4MaxLengths.getOrDefault("postal_code", 7)}) DEFAULT NULL,
"latitude" numeric(6,4) DEFAULT NULL,
"longitude" numeric(7,4) DEFAULT NULL,
"accuracy_radius" smallint DEFAULT NULL
);
// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
COMMENT ON COLUMN "ipv4"."v_geoname_id" IS 'One of valid geoname_id (from ipblocks_priority_geonameId_groupNames setting)';

[ipv6_create]
CREATE TABLE "ipv6" (
"network" cidr NOT NULL,
"start_ip" inet NOT NULL,
"last_ip" inet NOT NULL,
"start_int" numeric(39,0) NOT NULL,
"last_int" numeric(39,0) NOT NULL,
"start_bin" bytea NOT NULL,
"last_bin" bytea NOT NULL,
// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
"v_geoname_id" int NOT NULL,
"geoname_id" int DEFAULT NULL,
"registered_country_geoname_id" int DEFAULT NULL,
"represented_country_geoname_id" int DEFAULT NULL,
"is_anonymous_proxy" bool NOT NULL,
"is_satellite_provider" bool NOT NULL,
"postal_code" varchar(${ipv6MaxLengths.getOrDefault("postal_code", 7)}) DEFAULT NULL,
"latitude" numeric(6,4) DEFAULT NULL,
"longitude" numeric(7,4) DEFAULT NULL,
"accuracy_radius" smallint DEFAULT NULL
);
// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
COMMENT ON COLUMN "ipv6"."v_geoname_id" IS 'One of valid geoname_id (from ipblocks_priority_geonameId_groupNames setting)';

[ipv4_indexes]
ALTER TABLE "ipv4"
ADD CONSTRAINT "ipv4_network_UNIQUE" UNIQUE ("network"),
ADD CONSTRAINT "ipv4_start_ip_UNIQUE" UNIQUE ("start_ip"),
ADD CONSTRAINT "ipv4_last_ip_UNIQUE" UNIQUE ("last_ip"),
ADD CONSTRAINT "ipv4_start_int_UNIQUE" UNIQUE ("start_int"),
ADD CONSTRAINT "ipv4_last_int_UNIQUE" UNIQUE ("last_int"),
ADD CONSTRAINT "ipv4_start_bin_UNIQUE" UNIQUE ("start_bin"),
ADD CONSTRAINT "ipv4_last_bin_UNIQUE" UNIQUE ("last_bin"),
// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
ADD CONSTRAINT "ipv4_v_geoname_id_fk" FOREIGN KEY ("v_geoname_id") REFERENCES "city" ("geoname_id") ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT "ipv4_geoname_id_fk" FOREIGN KEY ("geoname_id") REFERENCES "city" ("geoname_id") ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT "ipv4_registered_country_geoname_id_fk" FOREIGN KEY ("registered_country_geoname_id") REFERENCES "city" ("geoname_id") ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT "ipv4_represented_country_geoname_id_fk" FOREIGN KEY ("represented_country_geoname_id") REFERENCES "city" ("geoname_id") ON UPDATE CASCADE ON DELETE RESTRICT;

CREATE INDEX "ipv4_v_geoname_id_fk_idx" ON "ipv4" ("v_geoname_id"); // Comment this line, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
CREATE INDEX "ipv4_geoname_id_fk_idx" ON "ipv4" ("geoname_id");
CREATE INDEX "ipv4_registered_country_geoname_id_fk_idx" ON "ipv4" ("registered_country_geoname_id");
CREATE INDEX "ipv4_represented_country_geoname_id_fk_idx" ON "ipv4" ("represented_country_geoname_id");

[ipv6_indexes]
ALTER TABLE "ipv6"
ADD CONSTRAINT "ipv6_network_UNIQUE" UNIQUE ("network"),
ADD CONSTRAINT "ipv6_start_ip_UNIQUE" UNIQUE ("start_ip"),
ADD CONSTRAINT "ipv6_last_ip_UNIQUE" UNIQUE ("last_ip"),
ADD CONSTRAINT "ipv6_start_int_UNIQUE" UNIQUE ("start_int"),
ADD CONSTRAINT "ipv6_last_int_UNIQUE" UNIQUE ("last_int"),
ADD CONSTRAINT "ipv6_start_bin_UNIQUE" UNIQUE ("start_bin"),
ADD CONSTRAINT "ipv6_last_bin_UNIQUE" UNIQUE ("last_bin"),
// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
ADD CONSTRAINT "ipv6_v_geoname_id_fk" FOREIGN KEY ("v_geoname_id") REFERENCES "city" ("geoname_id") ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT "ipv6_geoname_id_fk" FOREIGN KEY ("geoname_id") REFERENCES "city" ("geoname_id") ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT "ipv6_registered_country_geoname_id_fk" FOREIGN KEY ("registered_country_geoname_id") REFERENCES "city" ("geoname_id") ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT "ipv6_represented_country_geoname_id_fk" FOREIGN KEY ("represented_country_geoname_id") REFERENCES "city" ("geoname_id") ON UPDATE CASCADE ON DELETE RESTRICT;

CREATE INDEX "ipv6_v_geoname_id_fk_idx" ON "ipv6" ("v_geoname_id"); // Comment this line, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
CREATE INDEX "ipv6_geoname_id_fk_idx" ON "ipv6" ("geoname_id");
CREATE INDEX "ipv6_registered_country_geoname_id_fk_idx" ON "ipv6" ("registered_country_geoname_id");
CREATE INDEX "ipv6_represented_country_geoname_id_fk_idx" ON "ipv6" ("represented_country_geoname_id");

[ipv4_insert]
insert into ipv4(network,\
start_ip,last_ip,\
start_int,last_int,\
start_bin,last_bin,\
v_geoname_id,geoname_id,registered_country_geoname_id,represented_country_geoname_id,\
is_anonymous_proxy,is_satellite_provider,postal_code,latitude,longitude,accuracy_radius)values

[ipv6_insert]
insert into ipv6(network,\
start_ip,last_ip,\
start_int,last_int,\
start_bin,last_bin,\
v_geoname_id,geoname_id,registered_country_geoname_id,represented_country_geoname_id,\
is_anonymous_proxy,is_satellite_provider,postal_code,latitude,longitude,accuracy_radius)values

[ipv4_values]
(${.values.get("network") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}},\
${.range.start() Prefix{'} Postfix{'}},\
${.range.end() Prefix{'} Postfix{'}},\
${.range.start().asBigInteger()},\
${.range.end().asBigInteger()},\
'\x${.startToHex()}',\
'\x${.endToHex()}',\
${.priorityGeonameId},\ // Comment this line, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
${.values.get("geoname_id")},${.values.get("registered_country_geoname_id")},${.values.get("represented_country_geoname_id")},\
${.values.get("is_anonymous_proxy")}::bool,${.values.get("is_satellite_provider")}::bool,\
${.values.get("postal_code") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}},\
${.values.get("latitude")},${.values.get("longitude")},${.values.get("accuracy_radius")})

[ipv6_values]
(${.values.get("network") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}},\
${.range.start() Prefix{'} Postfix{'}},\
${.range.end() Prefix{'} Postfix{'}},\
${.range.start().asBigInteger()},\
${.range.end().asBigInteger()},\
'\x${.startToHex()}',\
'\x${.endToHex()}',\
${.priorityGeonameId},\ // Comment this line, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
${.values.get("geoname_id")},${.values.get("registered_country_geoname_id")},${.values.get("represented_country_geoname_id")},\
${.values.get("is_anonymous_proxy")}::bool,${.values.get("is_satellite_provider")}::bool,\
${.values.get("postal_code") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}},\
${.values.get("latitude")},${.values.get("longitude")},${.values.get("accuracy_radius")})

[timezone_create]
CREATE TABLE "timezone" (
"id" smallint NOT NULL,
"name" varchar(${locationMaxLengths.getOrDefault("time_zone", 30)}) NOT NULL
);

[timezone_indexes]
ALTER TABLE "timezone"
ADD CONSTRAINT "timezone_id_pkey" PRIMARY KEY ("id"),
ADD CONSTRAINT "timezone_name_UNIQUE" UNIQUE ("name");

[timezone_insert]
insert into timezone(id,name)values

[timezone_values]
(${.keys.get("timezone.id")},${.values.get("time_zone") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}})