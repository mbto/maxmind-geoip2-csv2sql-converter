// Configuration file maxmind-geoip2-csv2sql-converter for converting GeoLite2-City-CSV for Microsoft SQL Server 2019
// Section syntax: Settings: [Settings:key]; Template: [template_name]
// Merge next template line to current: \ on end line; Allowed: \n \r \t; Escaping: \\n \\r \\t
// Escape bracket char \{ or \[section name] if char '{' or section is a part of template
// Comments line: //
// Example template engine syntax:
// Field with getter or method(optional parameters): ${(.|..)fieldWithGetter|method("string param", longParam) key{value} key2{value2}}
// forEach: #{forEach{some text ${collection reference key{value} key2{value2}} ${collection2 reference key3{value3} key4{value4}} some textN} key5{value5} key6{value6}}

[Settings:Import]
locations_filenames=#{forEach{GeoLite2-City-Locations-${locales..code}.csv} Separator{,}}
ipv4_filename=GeoLite2-City-Blocks-IPv4.csv
ipv6_filename=GeoLite2-City-Blocks-IPv6.csv

[Settings:Export]
values_separator=,
values_end=;\ngo\n
values_end_of_file=
// https://docs.microsoft.com/en-us/sql/t-sql/queries/table-value-constructor-transact-sql?view=sql-server-ver15#limitations-and-restrictions
values_count_per_insert=1000 // Prevent SQL Error 10738 - 1000 row limit when importing to SQL server table
timezone_create_filename=timezone_create.sql
timezone_insert_filename=timezone_%03d.sql
timezone_indexes_filename=timezone_indexes.sql
country_create_filename=country_create.sql
country_insert_filename=country_%03d.sql
country_indexes_filename=country_indexes.sql
subdivision1_create_filename=subdivision1_create.sql
subdivision1_insert_filename=subdivision1_%03d.sql
subdivision1_indexes_filename=subdivision1_indexes.sql
subdivision2_create_filename=subdivision2_create.sql
subdivision2_insert_filename=subdivision2_%03d.sql
subdivision2_indexes_filename=subdivision2_indexes.sql
city_create_filename=city_create.sql
city_insert_filename=city_%03d.sql
city_indexes_filename=city_indexes.sql
ipv4_create_filename=ipv4_create.sql
ipv4_insert_filename=ipv4_%03d.sql
ipv4_indexes_filename=ipv4_indexes.sql
ipv6_create_filename=ipv6_create.sql
ipv6_insert_filename=ipv6_%03d.sql
ipv6_indexes_filename=ipv6_indexes.sql
// One of valid geoname_id for ipv4_values/ipv6_values templates from Blocks-IPv4/Blocks-IPv6 files (${.priorityGeonameId} placeholder);
ipblocks_priority_geonameId_groupNames=geoname_id,registered_country_geoname_id,represented_country_geoname_id
log_ignored_locations=false
log_ignored_ipblocks=false
log_undefined_all_geonameIds=true
log_undefined_all_subdivisions_and_city_name=false

schema_name=maxmind_city
load_data_filename=load_data.sql
windows_loader_filename=loader.bat
unix_loader_filename=loader.sh

[load_data]
begin transaction;
DROP TABLE IF EXISTS $(SCHEMA).[ipv4],$(SCHEMA).[ipv6],$(SCHEMA).[city],$(SCHEMA).[subdivision1],\
$(SCHEMA).[subdivision2],$(SCHEMA).[country],$(SCHEMA).[timezone];
DROP SCHEMA IF EXISTS $(SCHEMA);
go
CREATE SCHEMA $(SCHEMA);
go
#{forEach{:r ${createPaths..fileName Prefix{"} Postfix{"}}} Separator{\n}}
#{forEach{:r ${insertPaths..fileName Prefix{"} Postfix{"}}} Separator{\n} Disable{EmptyCollection}}
#{forEach{:r ${indexPaths..fileName Prefix{"} Postfix{"}}} Separator{\n}}
commit;
go
-- IP v4/v6 converter functions available in https:/\/stackoverflow.com/a/1385701

[windows_loader]
@echo off
chcp 65001
SET scriptPath=%~dp0
%scriptPath:~0,2%
cd %scriptPath:~0,-1%
echo Make sure there are no foreign keys in the database referencing to [${config.get("Export").get("schema_name")}] schema
pause.
// Replace below username "sa" and YOUR_PASSWORD_FOR_SA and YOUR_DATA_BASE_NAME or write yours connection properties
sqlcmd.exe -m-1 -b -f 65001 -H "127.0.0.1" -U "sa" -P "YOUR_PASSWORD_FOR_SA" -d YOUR_DATA_BASE_NAME -v SCHEMA="[${config.get("Export").get("schema_name")}]" \
-i ${config.get("Export").get("load_data_filename") Prefix{"} Postfix{"}}
echo IP v4/v6 converter functions available in https:/\/stackoverflow.com/a/1385701

[unix_loader]
#!/bin/bash
cd "$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
read -p "Make sure there are no foreign keys in the database referencing to [${config.get("Export").get("schema_name")}] schema"
// Replace below username "sa" and YOUR_PASSWORD_FOR_SA and YOUR_DATA_BASE_NAME or write yours connection properties
sqlcmd -m-1 -b -f 65001 -H "127.0.0.1" -U "sa" -P "YOUR_PASSWORD_FOR_SA" -d YOUR_DATA_BASE_NAME -v SCHEMA="[${config.get("Export").get("schema_name")}]" \
-i ${config.get("Export").get("load_data_filename") Prefix{"} Postfix{"}}
echo 'IP v4/v6 converter functions available in https:/\/stackoverflow.com/a/1385701'

[country_create]
CREATE TABLE $(SCHEMA).[country] (
[id] smallint NOT NULL,
[continent_code] char(2) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 NOT NULL,
//[continent_name_en] nvarchar(${locationMaxLengths.getOrDefault("continent_name", 31)}) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 NOT NULL,
// Uncomment one line above and comment one line below, if you need only EN (or yours) continent (add 'en' locale to required argument -l):
#{forEach{[continent_name_${locales..code}] nvarchar(${locales..getMaxLengthOrDefault("continent_name", 31)}) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 NOT NULL} Separator{,\n}},
[iso_code] char(2) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 DEFAULT NULL,
[emoji] nchar(4) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 DEFAULT NULL,
#{forEach{[name_${locales..code}] nvarchar(${locales..getMaxLengthOrDefault("country_name", 77)}) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 DEFAULT NULL} Separator{,\n}}
) WITH (DATA_COMPRESSION = PAGE);
go

[country_indexes]
ALTER TABLE $(SCHEMA).[country]
ADD CONSTRAINT [country_id_pkey] PRIMARY KEY ([id]) WITH (DATA_COMPRESSION = PAGE);

CREATE INDEX [country_iso_code_idx] ON $(SCHEMA).[country] ([iso_code]) WITH (DATA_COMPRESSION = PAGE);
go

[country_insert]
insert into $(SCHEMA).[country](id,continent_code,\
//continent_name_en,\
// Uncomment one line above and comment one line below, if you need only EN (or yours) continent (add 'en' locale to required argument -l):
#{forEach{[continent_name_${locales..code}]} Separator{,}},\
iso_code,emoji,#{forEach{[name_${locales..code}]} Separator{,}})values

[country_values]
(${.keys.get("country.id")},\
${.values.get("continent_code") Prefix{'} Postfix{'}},\
//${.localeValues.get("en").get("continent_name") Prefix{N'} Postfix{'} Escape{[']} Escaper{'$0}},\
// Uncomment one line above and comment one line below, if you need only EN (or yours) continent (add 'en' locale to required argument -l):
#{forEach{${.localeValues.values()..get("continent_name") Prefix{N'} Postfix{'} Escape{[']} Escaper{'$0}}} Separator{,}},\
${.values.get("country_iso_code") Prefix{'} Postfix{'}},${.emoji Prefix{N'} Postfix{'}},\
#{forEach{${.localeValues.values()..get("country_name") Prefix{N'} Postfix{'} Escape{[']} Escaper{'$0}}} Separator{,}})

[subdivision1_create]
CREATE TABLE $(SCHEMA).[subdivision1] (
[id] smallint NOT NULL,
[iso_code] varchar(${locationMaxLengths.getOrDefault("subdivision_1_iso_code", 3)}) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 NOT NULL,
#{forEach{[name_${locales..code}] nvarchar(${locales..getMaxLengthOrDefault("subdivision_1_name", 3)}) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 DEFAULT NULL} Separator{,\n}}
) WITH (DATA_COMPRESSION = PAGE);

[subdivision1_indexes]
ALTER TABLE $(SCHEMA).[subdivision1]
ADD CONSTRAINT [subdivision1_id_pkey] PRIMARY KEY ([id]) WITH (DATA_COMPRESSION = PAGE);

CREATE INDEX [subdivision1_iso_code_idx] ON $(SCHEMA).[subdivision1] ([iso_code]) WITH (DATA_COMPRESSION = PAGE);
go

[subdivision1_insert]
insert into $(SCHEMA).subdivision1(id,iso_code,#{forEach{[name_${locales..code}]} Separator{,}})values

[subdivision1_values]
(${.keys.get("subdivision1.id")},${.values.get("subdivision_1_iso_code") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}},\
#{forEach{${.localeValues.values()..get("subdivision_1_name") Prefix{N'} Postfix{'} Escape{[']} Escaper{'$0}}} Separator{,}})

[subdivision2_create]
CREATE TABLE $(SCHEMA).[subdivision2] (
[id] smallint NOT NULL,
[iso_code] varchar(${locationMaxLengths.getOrDefault("subdivision_2_iso_code", 3)}) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 NOT NULL,
#{forEach{[name_${locales..code}] nvarchar(${locales..getMaxLengthOrDefault("subdivision_2_name", 3)}) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 DEFAULT NULL} Separator{,\n}}
) WITH (DATA_COMPRESSION = PAGE);

[subdivision2_indexes]
ALTER TABLE $(SCHEMA).[subdivision2]
ADD CONSTRAINT [subdivision2_id_pkey] PRIMARY KEY ([id]) WITH (DATA_COMPRESSION = PAGE);

CREATE INDEX [subdivision2_iso_code_idx] ON $(SCHEMA).[subdivision2] ([iso_code]) WITH (DATA_COMPRESSION = PAGE);
go

[subdivision2_insert]
insert into $(SCHEMA).[subdivision2](id,iso_code,#{forEach{[name_${locales..code}]} Separator{,}})values

[subdivision2_values]
(${.keys.get("subdivision2.id")},${.values.get("subdivision_2_iso_code") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}},\
#{forEach{${.localeValues.values()..get("subdivision_2_name") Prefix{N'} Postfix{'} Escape{[']} Escaper{'$0}}} Separator{,}})

[city_create]
CREATE TABLE $(SCHEMA).[city] (
[geoname_id] int NOT NULL,
[country_id] smallint NOT NULL,
[subdivision1_id] smallint DEFAULT NULL,
[subdivision2_id] smallint DEFAULT NULL,
#{forEach{[name_${locales..code}] nvarchar(${locales..getMaxLengthOrDefault("city_name", 120)}) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 DEFAULT NULL} Separator{,\n}},
[metro_code] smallint DEFAULT NULL,
[time_zone_id] smallint NOT NULL,
[is_in_european_union] bit NOT NULL
) WITH (DATA_COMPRESSION = PAGE);

[city_indexes]
ALTER TABLE $(SCHEMA).[city]
ADD CONSTRAINT [city_geoname_id_pkey] PRIMARY KEY ([geoname_id]) WITH (DATA_COMPRESSION = PAGE),
CONSTRAINT [city_country_id_fk] FOREIGN KEY ([country_id]) REFERENCES $(SCHEMA).[country] ([id]) ON UPDATE NO ACTION ON DELETE NO ACTION,
CONSTRAINT [city_subdivision1_id_fk] FOREIGN KEY ([subdivision1_id]) REFERENCES $(SCHEMA).[subdivision1] ([id]) ON UPDATE NO ACTION ON DELETE NO ACTION,
CONSTRAINT [city_subdivision2_id_fk] FOREIGN KEY ([subdivision2_id]) REFERENCES $(SCHEMA).[subdivision2] ([id]) ON UPDATE NO ACTION ON DELETE NO ACTION,
CONSTRAINT [city_time_zone_id_fk] FOREIGN KEY ([time_zone_id]) REFERENCES $(SCHEMA).[timezone] ([id]) ON UPDATE NO ACTION ON DELETE NO ACTION;

CREATE INDEX [city_country_id_fk_idx] ON $(SCHEMA).[city] ([country_id]) WITH (DATA_COMPRESSION = PAGE);
CREATE INDEX [city_subdivision1_id_fk_idx] ON $(SCHEMA).[city] ([subdivision1_id]) WITH (DATA_COMPRESSION = PAGE);
CREATE INDEX [city_subdivision2_id_fk_idx] ON $(SCHEMA).[city] ([subdivision2_id]) WITH (DATA_COMPRESSION = PAGE);
CREATE INDEX [city_time_zone_id_fk_idx] ON $(SCHEMA).[city] ([time_zone_id]) WITH (DATA_COMPRESSION = PAGE);
go

[city_insert]
insert into $(SCHEMA).[city](geoname_id,country_id,subdivision1_id,subdivision2_id,#{forEach{[name_${locales..code}]} Separator{,}},\
metro_code,time_zone_id,is_in_european_union)values

[city_values]
(${.values.get("geoname_id")},${.keys.get("country.id")},\
${.keys.get("subdivision1.id")},${.keys.get("subdivision2.id")},\
#{forEach{${.localeValues.values()..get("city_name") Prefix{N'} Postfix{'} Escape{[']} Escaper{'$0}}} Separator{,}},\
${.values.get("metro_code")},${.keys.get("timezone.id")},${.values.get("is_in_european_union")})

[ipv4_create]
CREATE TABLE $(SCHEMA).[ipv4] (
[network] varchar(${ipv4MaxLengths.getOrDefault("network", 18)}) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 NOT NULL,
[start_ip] varchar(15) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 NOT NULL,
[last_ip] varchar(15) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 NOT NULL,
[start_int] bigint NOT NULL,
[last_int] bigint NOT NULL,
[start_bin] binary(4) NOT NULL,
[last_bin] binary(4) NOT NULL,
// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
[v_geoname_id] int NOT NULL,
[geoname_id] int DEFAULT NULL,
[registered_country_geoname_id] int DEFAULT NULL,
[represented_country_geoname_id] int DEFAULT NULL,
[is_anonymous_proxy] bit NOT NULL,
[is_satellite_provider] bit NOT NULL,
[postal_code] nvarchar(${ipv4MaxLengths.getOrDefault("postal_code", 7)}) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 DEFAULT NULL,
[latitude] decimal(6,4) DEFAULT NULL,
[longitude] decimal(7,4) DEFAULT NULL,
[accuracy_radius] smallint DEFAULT NULL
) WITH (DATA_COMPRESSION = PAGE);
// Comment 2 lines below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
EXEC sp_addextendedproperty 'MS_Description', N'One of valid geoname_id (from ipblocks_priority_geonameId_groupNames setting)',\
'SCHEMA', N'${config.get("Export").get("schema_name")}','TABLE', N'ipv4','COLUMN', N'v_geoname_id';
go

[ipv6_create]
CREATE TABLE $(SCHEMA).[ipv6] (
[network] varchar(${ipv6MaxLengths.getOrDefault("network", 43)}) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 NOT NULL,
[start_ip] varchar(39) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 NOT NULL,
[last_ip] varchar(39) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 NOT NULL,
[start_int] varchar(39) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 NOT NULL, // numeric(39) not supported, max = 38
[last_int] varchar(39) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 NOT NULL, // numeric(39) not supported, max = 38
[start_bin] binary(16) NOT NULL,
[last_bin] binary(16) NOT NULL,
// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
[v_geoname_id] int NOT NULL,
[geoname_id] int DEFAULT NULL,
[registered_country_geoname_id] int DEFAULT NULL,
[represented_country_geoname_id] int DEFAULT NULL,
[is_anonymous_proxy] bit NOT NULL,
[is_satellite_provider] bit NOT NULL,
[postal_code] nvarchar(${ipv6MaxLengths.getOrDefault("postal_code", 7)}) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 DEFAULT NULL,
[latitude] decimal(6,4) DEFAULT NULL,
[longitude] decimal(7,4) DEFAULT NULL,
[accuracy_radius] smallint DEFAULT NULL
) WITH (DATA_COMPRESSION = PAGE);
// Comment 2 lines below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
EXEC sp_addextendedproperty 'MS_Description', N'One of valid geoname_id (from ipblocks_priority_geonameId_groupNames setting)',\
'SCHEMA', N'${config.get("Export").get("schema_name")}','TABLE', N'ipv6','COLUMN', N'v_geoname_id';
go

[ipv4_indexes]
ALTER TABLE $(SCHEMA).[ipv4]
ADD CONSTRAINT [ipv4_network_UNIQUE] UNIQUE ([network]) WITH (DATA_COMPRESSION = PAGE),
CONSTRAINT [ipv4_start_ip_UNIQUE] UNIQUE ([start_ip]) WITH (DATA_COMPRESSION = PAGE),
CONSTRAINT [ipv4_last_ip_UNIQUE] UNIQUE ([last_ip]) WITH (DATA_COMPRESSION = PAGE),
CONSTRAINT [ipv4_start_int_UNIQUE] UNIQUE ([start_int]) WITH (DATA_COMPRESSION = PAGE),
CONSTRAINT [ipv4_last_int_UNIQUE] UNIQUE ([last_int]) WITH (DATA_COMPRESSION = PAGE),
CONSTRAINT [ipv4_start_bin_UNIQUE] UNIQUE ([start_bin]) WITH (DATA_COMPRESSION = PAGE),
CONSTRAINT [ipv4_last_bin_UNIQUE] UNIQUE ([last_bin]) WITH (DATA_COMPRESSION = PAGE),
// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
CONSTRAINT [ipv4_v_geoname_id_fk] FOREIGN KEY ([v_geoname_id]) REFERENCES \
$(SCHEMA).[city] ([geoname_id]) ON UPDATE NO ACTION ON DELETE NO ACTION,
CONSTRAINT [ipv4_geoname_id_fk] FOREIGN KEY ([geoname_id]) REFERENCES \
$(SCHEMA).[city] ([geoname_id]) ON UPDATE NO ACTION ON DELETE NO ACTION,
CONSTRAINT [ipv4_registered_country_geoname_id_fk] FOREIGN KEY ([registered_country_geoname_id]) REFERENCES \
$(SCHEMA).[city] ([geoname_id]) ON UPDATE NO ACTION ON DELETE NO ACTION,
CONSTRAINT [ipv4_represented_country_geoname_id_fk] FOREIGN KEY ([represented_country_geoname_id]) REFERENCES \
$(SCHEMA).[city] ([geoname_id]) ON UPDATE NO ACTION ON DELETE NO ACTION;

// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
CREATE INDEX [ipv4_v_geoname_id_fk_idx] ON $(SCHEMA).[ipv4] ([v_geoname_id]) WITH (DATA_COMPRESSION = PAGE);
CREATE INDEX [ipv4_geoname_id_fk_idx] ON $(SCHEMA).[ipv4] ([geoname_id]) WITH (DATA_COMPRESSION = PAGE);
CREATE INDEX [ipv4_registered_country_geoname_id_fk_idx] ON $(SCHEMA).[ipv4] ([registered_country_geoname_id]) WITH (DATA_COMPRESSION = PAGE);
CREATE INDEX [ipv4_represented_country_geoname_id_fk_idx] ON $(SCHEMA).[ipv4] ([represented_country_geoname_id]) WITH (DATA_COMPRESSION = PAGE);
go

[ipv6_indexes]
ALTER TABLE $(SCHEMA).[ipv6]
ADD CONSTRAINT [ipv6_network_UNIQUE] UNIQUE ([network]) WITH (DATA_COMPRESSION = PAGE),
CONSTRAINT [ipv6_start_ip_UNIQUE] UNIQUE ([start_ip]) WITH (DATA_COMPRESSION = PAGE),
CONSTRAINT [ipv6_last_ip_UNIQUE] UNIQUE ([last_ip]) WITH (DATA_COMPRESSION = PAGE),
CONSTRAINT [ipv6_start_int_UNIQUE] UNIQUE ([start_int]) WITH (DATA_COMPRESSION = PAGE),
CONSTRAINT [ipv6_last_int_UNIQUE] UNIQUE ([last_int]) WITH (DATA_COMPRESSION = PAGE),
CONSTRAINT [ipv6_start_bin_UNIQUE] UNIQUE ([start_bin]) WITH (DATA_COMPRESSION = PAGE),
CONSTRAINT [ipv6_last_bin_UNIQUE] UNIQUE ([last_bin]) WITH (DATA_COMPRESSION = PAGE),
// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
CONSTRAINT [ipv6_v_geoname_id_fk] FOREIGN KEY ([v_geoname_id]) REFERENCES \
$(SCHEMA).[city] ([geoname_id]) ON UPDATE NO ACTION ON DELETE NO ACTION,
CONSTRAINT [ipv6_geoname_id_fk] FOREIGN KEY ([geoname_id]) REFERENCES \
$(SCHEMA).[city] ([geoname_id]) ON UPDATE NO ACTION ON DELETE NO ACTION,
CONSTRAINT [ipv6_registered_country_geoname_id_fk] FOREIGN KEY ([registered_country_geoname_id]) REFERENCES \
$(SCHEMA).[city] ([geoname_id]) ON UPDATE NO ACTION ON DELETE NO ACTION,
CONSTRAINT [ipv6_represented_country_geoname_id_fk] FOREIGN KEY ([represented_country_geoname_id]) REFERENCES \
$(SCHEMA).[city] ([geoname_id]) ON UPDATE NO ACTION ON DELETE NO ACTION;

// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
CREATE INDEX [ipv6_v_geoname_id_fk_idx] ON $(SCHEMA).[ipv6] ([v_geoname_id]) WITH (DATA_COMPRESSION = PAGE);
CREATE INDEX [ipv6_geoname_id_fk_idx] ON $(SCHEMA).[ipv6] ([geoname_id]) WITH (DATA_COMPRESSION = PAGE);
CREATE INDEX [ipv6_registered_country_geoname_id_fk_idx] ON $(SCHEMA).[ipv6] ([registered_country_geoname_id]) WITH (DATA_COMPRESSION = PAGE);
CREATE INDEX [ipv6_represented_country_geoname_id_fk_idx] ON $(SCHEMA).[ipv6] ([represented_country_geoname_id]) WITH (DATA_COMPRESSION = PAGE);
go

[ipv4_insert]
insert into $(SCHEMA).[ipv4](network,\
start_ip,last_ip,\
start_int,last_int,\
start_bin,last_bin,\
v_geoname_id,geoname_id,registered_country_geoname_id,represented_country_geoname_id,\
is_anonymous_proxy,is_satellite_provider,postal_code,latitude,longitude,accuracy_radius)values

[ipv6_insert]
insert into $(SCHEMA).[ipv6](network,\
start_ip,last_ip,\
start_int,last_int,\
start_bin,last_bin,\
v_geoname_id,geoname_id,registered_country_geoname_id,represented_country_geoname_id,\
is_anonymous_proxy,is_satellite_provider,postal_code,latitude,longitude,accuracy_radius)values

[ipv4_values]
(${.values.get("network") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}},\
${.range.start() Prefix{'} Postfix{'}},\
${.range.end() Prefix{'} Postfix{'}},\
${.range.start().asBigInteger()},\
${.range.end().asBigInteger()},\
0x${.range.start().asBigInteger().toString(16)},\
0x${.range.end().asBigInteger().toString(16)},\
${.priorityGeonameId},\ // Comment this line, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
${.values.get("geoname_id")},${.values.get("registered_country_geoname_id")},${.values.get("represented_country_geoname_id")},\
${.values.get("is_anonymous_proxy")},${.values.get("is_satellite_provider")},\
${.values.get("postal_code") Prefix{N'} Postfix{'} Escape{[']} Escaper{'$0}},\
${.values.get("latitude")},${.values.get("longitude")},${.values.get("accuracy_radius")})

[ipv6_values]
(${.values.get("network") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}},\
${.range.start() Prefix{'} Postfix{'}},\
${.range.end() Prefix{'} Postfix{'}},\
${.range.start().asBigInteger()},\
${.range.end().asBigInteger()},\
0x${.range.start().asBigInteger().toString(16)},\
0x${.range.end().asBigInteger().toString(16)},\
${.priorityGeonameId},\ // Comment this line, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
${.values.get("geoname_id")},${.values.get("registered_country_geoname_id")},${.values.get("represented_country_geoname_id")},\
${.values.get("is_anonymous_proxy")},${.values.get("is_satellite_provider")},\
${.values.get("postal_code") Prefix{N'} Postfix{'} Escape{[']} Escaper{'$0}},\
${.values.get("latitude")},${.values.get("longitude")},${.values.get("accuracy_radius")})

[timezone_create]
CREATE TABLE $(SCHEMA).[timezone] (
[id] smallint NOT NULL,
[name] varchar(${locationMaxLengths.getOrDefault("time_zone", 30)}) COLLATE Cyrillic_General_100_CI_AI_SC_UTF8 NOT NULL
) WITH (DATA_COMPRESSION = PAGE);

[timezone_indexes]
ALTER TABLE $(SCHEMA).[timezone]
ADD CONSTRAINT [timezone_id_pkey] PRIMARY KEY ([id]) WITH (DATA_COMPRESSION = PAGE),
CONSTRAINT [timezone_name_UNIQUE] UNIQUE ([name]) WITH (DATA_COMPRESSION = PAGE);
go

[timezone_insert]
insert into $(SCHEMA).[timezone](id,name)values

[timezone_values]
(${.keys.get("timezone.id")},${.values.get("time_zone") Prefix{'} Postfix{'} Escape{[']} Escaper{'$0}})