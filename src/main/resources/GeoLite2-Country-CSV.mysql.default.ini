// Configuration file maxmind-geoip2-csv2sql-converter for converting GeoLite2-Country-CSV for MySQL
// Section syntax: Settings: [Settings:key]; Template: [template_name]
// Merge next template line to current: \ on end line; Allowed: \n \r \t; Escaping: \\n \\r \\t
// Escape bracket char \{ or \[section name] if char '{' or section is a part of template
// Comments line: //
// Example template engine syntax:
// Field with getter or method(optional parameters): ${(.|..)fieldWithGetter|method("string param", longParam) key{value} key2{value2}}
// forEach: #{forEach{some text ${collection reference key{value} key2{value2}} ${collection2 reference key3{value3} key4{value4}} some textN} key5{value5} key6{value6}}

[Settings:Import]
locations_filenames=#{forEach{GeoLite2-Country-Locations-${locales..code}.csv} Separator{,}}
ipv4_filename=GeoLite2-Country-Blocks-IPv4.csv
ipv6_filename=GeoLite2-Country-Blocks-IPv6.csv

[Settings:Export]
values_separator=,
values_end=;
values_end_of_file=
values_count_per_insert=
country_create_filename=country_create.sql
country_insert_filename=country_%03d.sql
country_indexes_filename=country_indexes.sql
ipv4_create_filename=ipv4_create.sql
ipv4_insert_filename=ipv4_%03d.sql
ipv4_indexes_filename=ipv4_indexes.sql
ipv6_create_filename=ipv6_create.sql
ipv6_insert_filename=ipv6_%03d.sql
ipv6_indexes_filename=ipv6_indexes.sql
// One of valid geoname_id for ipv4_values/ipv6_values templates from Blocks-IPv4/Blocks-IPv6 files (${.priorityGeonameId} placeholder);
ipblocks_priority_geonameId_groupNames=geoname_id,registered_country_geoname_id,represented_country_geoname_id
log_ignored_locations=false
log_ignored_ipblocks=false
log_undefined_all_geonameIds=true
log_undefined_all_subdivisions_and_city_name=false

schema_name=maxmind_country
load_data_filename=load_data.sql
windows_loader_filename=loader.bat
unix_loader_filename=loader.sh

[load_data]
SET NAMES utf8mb4;
SET GLOBAL max_allowed_packet=${args.getBytesCountPerFile()};
SET FOREIGN_KEY_CHECKS=0;
DROP SCHEMA IF EXISTS `${config.get("Export").get("schema_name")}`;
CREATE SCHEMA `${config.get("Export").get("schema_name")}` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE `${config.get("Export").get("schema_name")}`;
#{forEach{\. ${createPaths..fileName}} Separator{\n}}
BEGIN;
#{forEach{\. ${insertPaths..fileName}} Separator{\n} Disable{EmptyCollection}}
COMMIT;
#{forEach{\. ${indexPaths..fileName}} Separator{\n}}
SET FOREIGN_KEY_CHECKS=1;

[windows_loader]
@echo off
chcp 65001
SET scriptPath=%~dp0
%scriptPath:~0,2%
cd %scriptPath:~0,-1%
"C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\\mysql.exe" --host=127.0.0.1 --port=3306 \
--user=root --password=root --max_allowed_packet=${args.getBytesCountPerFile()} < "${config.get("Export").get("load_data_filename")}"

[unix_loader]
#!/bin/bash
cd "$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
mysql --host=127.0.0.1 --port=3306 --user=root --password=root --max_allowed_packet=${args.getBytesCountPerFile()} < "${config.get("Export").get("load_data_filename")}"

[country_create]
CREATE TABLE `country` (
`geoname_id` int unsigned NOT NULL,
`continent_code` char(2) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
//`continent_name_en` varchar(${locationMaxLengths.getOrDefault("continent_name", 31)}) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
// Uncomment one line above and comment one line below, if you need only EN (or yours) continent (add 'en' locale to required argument -l):
#{forEach{`continent_name_${locales..code}` varchar(${locales..getMaxLengthOrDefault("continent_name", 31)}) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL} Separator{,\n}},
`iso_code` char(2) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
`emoji` char(2) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
#{forEach{`name_${locales..code}` varchar(${locales..getMaxLengthOrDefault("country_name", 77)}) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL} Separator{,\n}},
`is_in_european_union` tinyint(1) unsigned NOT NULL,
PRIMARY KEY (`geoname_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=2;

[country_indexes]
ALTER TABLE `country`
ADD UNIQUE INDEX `country_iso_code_UNIQUE` (`iso_code`);

[country_insert]
insert into country(geoname_id,continent_code,\
//continent_name_en,\
// Uncomment one line above and comment one line below, if you need only EN (or yours) continent (add 'en' locale to required argument -l):
#{forEach{`continent_name_${locales..code}`} Separator{,}},\
iso_code,emoji,#{forEach{`name_${locales..code}`} Separator{,}},is_in_european_union) values

[country_values]
(${.values.get("geoname_id")},\
${.values.get("continent_code") Prefix{'} Postfix{'}},\
//${.localeValues.get("en").get("continent_name") Prefix{'} Postfix{'} Escape{[']} Escaper{\\$0}},\
// Uncomment one line above and comment one line below, if you need only EN (or yours) continent (add 'en' locale to required argument -l):
#{forEach{${.localeValues.values()..get("continent_name") Prefix{'} Postfix{'} Escape{[']} Escaper{\\$0}}} Separator{,}},\
${.values.get("country_iso_code") Prefix{'} Postfix{'}},${.emoji Prefix{'} Postfix{'}},\
#{forEach{${.localeValues.values()..get("country_name") Prefix{'} Postfix{'} Escape{[']} Escaper{\\$0}}} Separator{,}},\
${.values.get("is_in_european_union")})

[ipv4_create]
CREATE TABLE `ipv4` (
`network` varchar(${ipv4MaxLengths.getOrDefault("network", 18)}) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
`start_ip` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
`last_ip` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
`start_int` int unsigned NOT NULL,
`last_int` int unsigned NOT NULL,
`start_bin` binary(4) NOT NULL,
`last_bin` binary(4) NOT NULL,
// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
`v_geoname_id` int unsigned NOT NULL COMMENT 'One of valid geoname_id (from ipblocks_priority_geonameId_groupNames setting)',
`geoname_id` int unsigned DEFAULT NULL,
`registered_country_geoname_id` int unsigned DEFAULT NULL,
`represented_country_geoname_id` int unsigned DEFAULT NULL,
`is_anonymous_proxy` tinyint(1) unsigned NOT NULL,
`is_satellite_provider` tinyint(1) unsigned NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=2;

[ipv6_create]
CREATE TABLE `ipv6` (
`network` varchar(${ipv6MaxLengths.getOrDefault("network", 43)}) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
`start_ip` varchar(39) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
`last_ip` varchar(39) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
`start_int` decimal(39,0) unsigned NOT NULL,
`last_int` decimal(39,0) unsigned NOT NULL,
`start_bin` binary(16) NOT NULL,
`last_bin` binary(16) NOT NULL,
// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
`v_geoname_id` int unsigned NOT NULL COMMENT 'One of valid geoname_id (from ipblocks_priority_geonameId_groupNames setting)',
`geoname_id` int unsigned DEFAULT NULL,
`registered_country_geoname_id` int unsigned DEFAULT NULL,
`represented_country_geoname_id` int unsigned DEFAULT NULL,
`is_anonymous_proxy` tinyint(1) unsigned NOT NULL,
`is_satellite_provider` tinyint(1) unsigned NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=2;

[ipv4_indexes]
ALTER TABLE `ipv4`
ADD UNIQUE INDEX `ipv4_network_UNIQUE` (`network`),
ADD UNIQUE INDEX `ipv4_start_ip_UNIQUE` (`start_ip`),
ADD UNIQUE INDEX `ipv4_last_ip_UNIQUE` (`last_ip`),
ADD UNIQUE INDEX `ipv4_start_int_UNIQUE` (`start_int`),
ADD UNIQUE INDEX `ipv4_last_int_UNIQUE` (`last_int`),
ADD UNIQUE INDEX `ipv4_start_bin_UNIQUE` (`start_bin`),
ADD UNIQUE INDEX `ipv4_last_bin_UNIQUE` (`last_bin`),
ADD INDEX `ipv4_v_geoname_id_fk_idx` (`v_geoname_id`), // Comment this line, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
ADD INDEX `ipv4_geoname_id_fk_idx` (`geoname_id`),
ADD INDEX `ipv4_registered_country_geoname_id_fk_idx` (`registered_country_geoname_id`),
ADD INDEX `ipv4_represented_country_geoname_id_fk_idx` (`represented_country_geoname_id`),
// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
ADD CONSTRAINT `ipv4_v_geoname_id_fk` FOREIGN KEY (`v_geoname_id`) REFERENCES `country` (`geoname_id`) ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT `ipv4_geoname_id_fk` FOREIGN KEY (`geoname_id`) REFERENCES `country` (`geoname_id`) ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT `ipv4_registered_country_geoname_id_fk` FOREIGN KEY (`registered_country_geoname_id`) REFERENCES `country` (`geoname_id`) ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT `ipv4_represented_country_geoname_id_fk` FOREIGN KEY (`represented_country_geoname_id`) REFERENCES `country` (`geoname_id`) ON UPDATE CASCADE ON DELETE RESTRICT;

[ipv6_indexes]
ALTER TABLE `ipv6`
ADD UNIQUE INDEX `ipv6_network_UNIQUE` (`network`),
ADD UNIQUE INDEX `ipv6_start_ip_UNIQUE` (`start_ip`),
ADD UNIQUE INDEX `ipv6_last_ip_UNIQUE` (`last_ip`),
ADD UNIQUE INDEX `ipv6_start_int_UNIQUE` (`start_int`),
ADD UNIQUE INDEX `ipv6_last_int_UNIQUE` (`last_int`),
ADD UNIQUE INDEX `ipv6_start_bin_UNIQUE` (`start_bin`),
ADD UNIQUE INDEX `ipv6_last_bin_UNIQUE` (`last_bin`),
ADD INDEX `ipv6_v_geoname_id_fk_idx` (`v_geoname_id`), // Comment this line, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
ADD INDEX `ipv6_geoname_id_fk_idx` (`geoname_id`),
ADD INDEX `ipv6_registered_country_geoname_id_fk_idx` (`registered_country_geoname_id`),
ADD INDEX `ipv6_represented_country_geoname_id_fk_idx` (`represented_country_geoname_id`),
// Comment line below, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
ADD CONSTRAINT `ipv6_v_geoname_id_fk` FOREIGN KEY (`v_geoname_id`) REFERENCES `country` (`geoname_id`) ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT `ipv6_geoname_id_fk` FOREIGN KEY (`geoname_id`) REFERENCES `country` (`geoname_id`) ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT `ipv6_registered_country_geoname_id_fk` FOREIGN KEY (`registered_country_geoname_id`) REFERENCES `country` (`geoname_id`) ON UPDATE CASCADE ON DELETE RESTRICT,
ADD CONSTRAINT `ipv6_represented_country_geoname_id_fk` FOREIGN KEY (`represented_country_geoname_id`) REFERENCES `country` (`geoname_id`) ON UPDATE CASCADE ON DELETE RESTRICT;

[ipv4_insert]
insert into ipv4(network,\
start_ip,last_ip,\
start_int,last_int,\
start_bin,last_bin,\
v_geoname_id,geoname_id,registered_country_geoname_id,represented_country_geoname_id,\
is_anonymous_proxy,is_satellite_provider)values

[ipv6_insert]
insert into ipv6(network,\
start_ip,last_ip,\
start_int,last_int,\
start_bin,last_bin,\
v_geoname_id,geoname_id,registered_country_geoname_id,represented_country_geoname_id,\
is_anonymous_proxy,is_satellite_provider)values

[ipv4_values]
(${.values.get("network") Prefix{'} Postfix{'} Escape{[']} Escaper{\\$0}},\
${.range.start() Prefix{'} Postfix{'}},\
${.range.end() Prefix{'} Postfix{'}},\
${.range.start().asBigInteger()},\
${.range.end().asBigInteger()},\
0x${.range.start().asBigInteger().toString(16)},\
0x${.range.end().asBigInteger().toString(16)},\
${.priorityGeonameId},\ // Comment this line, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
${.values.get("geoname_id")},${.values.get("registered_country_geoname_id")},${.values.get("represented_country_geoname_id")},\
${.values.get("is_anonymous_proxy")},${.values.get("is_satellite_provider")})

[ipv6_values]
(${.values.get("network") Prefix{'} Postfix{'} Escape{[']} Escaper{\\$0}},\
${.range.start() Prefix{'} Postfix{'}},\
${.range.end() Prefix{'} Postfix{'}},\
${.range.start().asBigInteger()},\
${.range.end().asBigInteger()},\
0x${.range.start().asBigInteger().toString(16)},\
0x${.range.end().asBigInteger().toString(16)},\
${.priorityGeonameId},\ // Comment this line, if one of valid geoname_id is redundant (from ipblocks_priority_geonameId_groupNames setting)
${.values.get("geoname_id")},${.values.get("registered_country_geoname_id")},${.values.get("represented_country_geoname_id")},\
${.values.get("is_anonymous_proxy")},${.values.get("is_satellite_provider")})